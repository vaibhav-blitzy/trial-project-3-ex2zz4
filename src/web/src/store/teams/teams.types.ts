/**
 * @fileoverview TypeScript types and interfaces for team-related Redux state management
 * Provides type definitions for team operations with enhanced error handling and type safety
 * @version 1.0.0
 */

import { PayloadAction } from '@reduxjs/toolkit';
import { ITeam, ITeamMember } from '../../interfaces/team.interface';

/**
 * Enum of all team-related Redux action types with namespaced values
 * Ensures unique action types across the application
 */
export enum TeamActionTypes {
    FETCH_TEAMS = '@teams/fetchTeams',
    CREATE_TEAM = '@teams/createTeam',
    UPDATE_TEAM = '@teams/updateTeam',
    DELETE_TEAM = '@teams/deleteTeam',
    SELECT_TEAM = '@teams/selectTeam',
    ADD_MEMBER = '@teams/addMember',
    REMOVE_MEMBER = '@teams/removeMember'
}

/**
 * Type definition for team-related errors with detailed information
 */
export type TeamError = {
    code: string;
    message: string;
    details: Record<string, unknown>;
};

/**
 * Interface defining the shape of the teams Redux state
 * Includes loading state, error handling, and timestamp tracking
 */
export interface TeamState {
    readonly teams: readonly ITeam[];
    readonly selectedTeam: readonly ITeam | null;
    loading: boolean;
    error: TeamError | null;
    lastUpdated: number;
}

/**
 * Interface for fetch teams action payload with pagination support
 */
export interface FetchTeamsPayload {
    filters: Record<string, unknown>;
    page: number;
    limit: number;
}

/**
 * Interface for create team action payload
 * Omits the ID as it will be generated by the backend
 */
export interface CreateTeamPayload {
    teamData: Omit<ITeam, 'id'>;
}

/**
 * Interface for update team action payload
 * Allows partial updates of team properties
 */
export interface UpdateTeamPayload {
    teamId: string;
    teamData: Partial<Omit<ITeam, 'id'>>;
}

/**
 * Interface for team member operations payload
 * Used for both adding and removing team members
 */
export interface TeamMemberPayload {
    teamId: string;
    userId: string;
    role: ITeamMember['role'];
}

/**
 * Type definitions for Redux actions with typed payloads
 */
export type FetchTeamsAction = PayloadAction<FetchTeamsPayload>;
export type CreateTeamAction = PayloadAction<CreateTeamPayload>;
export type UpdateTeamAction = PayloadAction<UpdateTeamPayload>;
export type DeleteTeamAction = PayloadAction<string>;
export type SelectTeamAction = PayloadAction<string>;
export type AddMemberAction = PayloadAction<TeamMemberPayload>;
export type RemoveMemberAction = PayloadAction<TeamMemberPayload>;

/**
 * Union type of all team-related Redux actions
 */
export type TeamAction =
    | FetchTeamsAction
    | CreateTeamAction
    | UpdateTeamAction
    | DeleteTeamAction
    | SelectTeamAction
    | AddMemberAction
    | RemoveMemberAction;