apiVersion: apps/v1
kind: Deployment
metadata:
  name: task-service
  namespace: default
  labels:
    app: task-service
    component: backend
    part-of: task-management-system
    version: latest
    environment: production
  annotations:
    kubernetes.io/change-cause: "Initial deployment"
    prometheus.io/scrape: "true"
    prometheus.io/port: "3002"
    prometheus.io/path: "/metrics"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: task-service
  template:
    metadata:
      labels:
        app: task-service
        component: backend
        version: latest
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3002"
        prometheus.io/path: "/metrics"
    spec:
      # Security Context for Pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      
      # Pod distribution strategy
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - task-service
              topologyKey: kubernetes.io/hostname

      containers:
      - name: task-service
        image: task-management-system/task-service:latest
        imagePullPolicy: Always
        
        # Container Security Context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        
        # Service Ports
        ports:
        - name: http
          containerPort: 3002
          protocol: TCP
        - name: metrics
          containerPort: 3002
          protocol: TCP
        
        # Resource Limits
        resources:
          limits:
            cpu: "2"
            memory: "4Gi"
          requests:
            cpu: "500m"
            memory: "1Gi"
        
        # Health Checks
        livenessProbe:
          httpGet:
            path: /health
            port: 3002
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health
            port: 3002
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /health
            port: 3002
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        
        # Volume Mounts
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: config
          mountPath: /app/config
          readOnly: true
        
        # Environment Configuration
        envFrom:
        - configMapRef:
            name: task-service-config
        - secretRef:
            name: task-service-secrets
      
      # Volumes
      volumes:
      - name: tmp
        emptyDir: {}
      - name: config
        configMap:
          name: task-service-config
      
      # Graceful Termination
      terminationGracePeriodSeconds: 60